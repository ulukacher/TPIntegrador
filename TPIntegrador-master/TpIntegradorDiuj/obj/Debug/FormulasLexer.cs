//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\uri_a\Desktop\UTN\2017\DDS\Integrador\TP Integrador .NET\TpIntegradorDiuj\TpIntegradorDiuj\Formulas.g4 by ANTLR 4.6.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TpIntegradorDiuj {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1")]
[System.CLSCompliant(false)]
public partial class FormulasLexer : Lexer {
	public const int
		WS=1, WHITESPACE=2, OPERADOR=3, VALOR=4;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "LOWERCASE", "UPPERCASE", "WHITESPACE", "OPERADOR", "VALOR"
	};


	public FormulasLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "WHITESPACE", "OPERADOR", "VALOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Formulas.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x6!\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a"+
		"\x6\a\x1E\n\a\r\a\xE\a\x1F\x2\x2\x2\b\x3\x2\x3\x5\x2\x2\a\x2\x2\t\x2\x4"+
		"\v\x2\x5\r\x2\x6\x3\x2\x6\x3\x2\x63|\x3\x2\x43\\\x4\x2\v\v\"\"\x5\x2,"+
		"-//\x31\x31 \x2\x3\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r"+
		"\x3\x2\x2\x2\x3\xF\x3\x2\x2\x2\x5\x13\x3\x2\x2\x2\a\x15\x3\x2\x2\x2\t"+
		"\x17\x3\x2\x2\x2\v\x19\x3\x2\x2\x2\r\x1D\x3\x2\x2\x2\xF\x10\a\"\x2\x2"+
		"\x10\x11\x3\x2\x2\x2\x11\x12\b\x2\x2\x2\x12\x4\x3\x2\x2\x2\x13\x14\t\x2"+
		"\x2\x2\x14\x6\x3\x2\x2\x2\x15\x16\t\x3\x2\x2\x16\b\x3\x2\x2\x2\x17\x18"+
		"\t\x4\x2\x2\x18\n\x3\x2\x2\x2\x19\x1A\t\x5\x2\x2\x1A\f\x3\x2\x2\x2\x1B"+
		"\x1E\x5\x5\x3\x2\x1C\x1E\x5\a\x4\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1C\x3\x2"+
		"\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2 \xE\x3"+
		"\x2\x2\x2\x5\x2\x1D\x1F\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TpIntegradorDiuj
